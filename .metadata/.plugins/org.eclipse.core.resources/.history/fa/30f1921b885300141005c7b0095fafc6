package com.example.images;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.joda.time.DateTime;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.apache.http.util.EntityUtils;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.telerik.everlive.sdk.core.EverliveApp;
import com.telerik.everlive.sdk.core.result.RequestResult;

import android.R.integer;
import android.os.AsyncTask;
import android.util.Log;

public class GetAsyncResult extends AsyncTask<Void, Void, ArrayList<ImageInfo>> {

	//EverliveApp everlive = new EverliveApp("gIMQgGG9sI53ZQjD");

	@Override
	protected ArrayList<ImageInfo> doInBackground(Void... params) {

		ArrayList<ImageInfo> images = new ArrayList<ImageInfo>();
		BufferedReader in = null;
		JSONArray result = null;
		HttpClient httpclient = new DefaultHttpClient();

		try {
			URI url = new URI("http://api.everlive.com/v1/gIMQgGG9sI53ZQjD/ImagesInfo");
			HttpGet getResult = new HttpGet(url);

			HttpResponse response = httpclient.execute(getResult);
			in = new BufferedReader(new InputStreamReader(response.getEntity()
					.getContent()));
			// Log.e("Success", "Success");
			String line = in.readLine();
			StringBuilder sb = new StringBuilder();

			while (line != null) {
				sb.append(line);
				line = in.readLine();
			}

			JSONObject jsonObj = new JSONObject(sb.toString());
			String count = jsonObj.get("Count").toString();
			int number = Integer.parseInt(count);

			result = jsonObj.getJSONArray("Result"); // takes number of pictures
														// in the object

			// makes array of ImageInfo
			for (int i = 0; i < number; i++) {
				ImageInfo imageInfo = new ImageInfo();
				Image image = new Image();
				MyLocation myLocation;
				boolean isPublic;
				String address;
				String publicationDate;

				JSONObject jsonObject = result.getJSONObject(i);

				address = jsonObject.get("Address").toString();
				publicationDate = jsonObject.get("PublicationDate").toString();
				String publicOrNot = jsonObject.get("Public").toString();
				isPublic = (publicOrNot == "true") ? true : false;

				JSONObject location = jsonObject.getJSONObject("Location");
				String latitude = location.get("latitude").toString();
				String longitude = location.get("longitude").toString();
				int intLat = Integer.parseInt(latitude);
				int intLng = Integer.parseInt(longitude);

				myLocation = new MyLocation(intLat, intLng);

				JSONObject imageJson = jsonObject.getJSONObject("Picture");
				String name = imageJson.get("Filename").toString();
				String type = imageJson.get("ContentType").toString();
				String base64 = imageJson.get("base64").toString();

				image.base64 = base64;
				// System.out.println(base64);
				// System.out.println(image.base64);
				image.Filename = name;
				image.ContentType = type;

				imageInfo.Address = address;
				imageInfo.Picture = image;
				imageInfo.location = myLocation;
				// imageInfo.publicationDate = new Date();
				imageInfo.Public = isPublic;

				images.add(imageInfo);
			}
			
			Collections.reverse(images);
			// Log.e("Result", "OK");
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return images;
	}

}
